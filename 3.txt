ОБЪЕКТНО-ОРИЕНТИРОВАННОЕ ПРОГРАММИРОВАНИЕ. 
ПАКЕТЫ. 
ЛАБОРАТОРНАЯ РАБОТА №3 
Решение всех задач оформить в одном проекте, но в разных классах. В главном методе main показать 
работу всех классов и методов с дружественным интерфейсом. Все исходные данные вводятся с 
клавиатуры, организовать проверку на ввод. В каждом классе должны присутствовать свойства, 
конструкторы и метод toString().  


Задание 1. Инкапсуляция: private, геттеры и сеттеры, выбрасывание 
исключений через throw, класс RuntimeException и его наследники. 

1.6.Отдельные линии. 
Измените сущность Линия из задачи 1.5.3:
класс Line:
// Класс для представления линии на плоскости
public class Line {
    private Point start;
    private Point end;

    // Конструктор для инициализации линии двумя точками
    public Line(Point start, Point end) {
        this.start = start;
        this.end = end;
    }

    // Конструктор для инициализации линии четырьмя координатами
    public Line(int x1, int y1, int x2, int y2) {
        this.start = new Point(x1, y1);
        this.end = new Point(x2, y2);
    }

    // Метод для получения текстового представления линии
    @Override
    public String toString() {
        return "Линия от " + start + " до " + end;
    }

    // Метод для вычисления длины линии
    public int getLength() {
        int dx = end.getX() - start.getX();
        int dy = end.getY() - start.getY();
        return (int) Math.sqrt(dx * dx + dy * dy);
    }

    // Геттеры и сеттеры для точек начала и конца
    public Point getStart() {
        return start;
    }

    public void setStart(Point start) {
        this.start = start;
    }

    public Point getEnd() {
        return end;
    }

    public void setEnd(Point end) {
        this.end = end;
    }
}


 Необходимо, чтобы Линия соответствовала 
следующим требованиям: 
	1. Две любые линии не могут ссылаться на один и тот же объект точки. 
	2. У Линии можно изменить координаты начала или конца 
	3. У Линии можно запросить координаты начала или конца 
Продемонстрируйте работоспособность решения на примере -необходимо создать две линии в главном методе.

1.12. Квадрат.Создайте сущность Квадрат. Квадрат описывается следующими характеристиками: 
	Имеет сущность Точку описанную ниже:
класс Point:
import java.util.Scanner;

// Класс для представления точки на плоскости
public class Point {
    private int x;
    private int y;

    // Конструктор для инициализации координат точки
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    // Метод для получения текстового представления точки
    @Override
    public String toString() {
        return "{" + x + ";" + y + "}";
    }

    // Геттеры и сеттеры для координат
    public int getX() {
        return x;
    }

    public void setX(int x) {
        this.x = x;
    }

    public int getY() {
        return y;
    }

    public void setY(int y) {
        this.y = y;
    }

    // Метод для создания точки с вводом координат с клавиатуры
    public static Point createPointFromInput(Scanner scanner) {
        System.out.println("Введите координаты точки (x y):");
        int x = scanner.nextInt();
        int y = scanner.nextInt();
        return new Point(x, y);
    }
}
,отмечающую левый верхний угол 
	1. Имеет длину стороны. 
	2. Создается путем указания точки левого верхнего угла и размера стороны 
	3. Создается путем указания координаты x и y левого верхнего угла и размера стороны 
	4. Может быть приведен к строке вида “Квадрат в точке T со стороной N”, где N – длина 
стороны, а T – результат приведения к строке верхнего левого угла 
	5. Может возвращать новую Ломаную (из задачи 1.5.7), точки которой соответствуют 
точкам углов текущего квадрата.   
Необходимо выполнить следующие задачи: 
1. Создайте Квадрат в точке {5;3} со стороной 23 
2. Присвойте в ссылку типа Ломаная результат вызова метода получения Ломаной у ранее 
созданного квадрата 
3. Выведите на экран общую длину полученной Ломаной 
4. Сдвиньте последнюю Точку Ломаной в позицию {15,25} 
5. Снова выведите на экран длину Ломаной




Задание 2. Разработка структур данных.
2.1. Неизменяемый массив.  
Необходимо разработать сущность НеизменяемыйСписокЗначений, представляющий собой 
обертку над массивом целых чисел, который сохранит функциональные возможности массивов, 
но добавит некоторые дополнительные возможности. 
Состояние сущности описывают следующие сведения:  
	1. Имеет массив целых чисел. Именно он используется для хранения значений.  
Инициализация сущности может быть выполнена следующим образом: 
	2. С указанием значений в виде массива целых чисел. 
	3. С указанием перечня чисел как независимых значений (через запятую) 
	4. С указанием другого Списка, в этом случае копируются все значения указанного списка. 
Поведение сущности описывают следующие действия: 
	1. Получение значения из позицииN. Позиция должна попадать в диапазон от 0 до N-1, где 
N–текущее количество значений, иначе выкинуть ошибку.  
	2. Замена значения в позиции N на новое значение. Позиция должна попадать в диапазон от 
0 до N-1, где N–текущее количество значений, иначе выкинуть ошибку. 
	3. Может быть приведен к строке. Строка должна представлять собой полный перечень всех 
хранимых чисел, причем первый символ строки это ”[“, а последний “]”. 
	4. Можно проверить пуст Список или нет. Список пуст если его размер 0. 
	5. Можно узнать текущий размер.  
	6. Все хранящиеся значения можно запросить в виде стандартного массива. 
Продемонстрируйте работоспособность решения в главном методе. 



Задание 3. Наследование: extends, super, final, переопределение
3.5. Трехмерная точка.  
Создайте такой подвид сущности Точка, которая будет иметь не две, а три 
координаты на плоскости: X,Y,Z. 



Задание 4. Создание иерархий: abstract.
4.5. Точки. 
Необходимо разработать сущности на основе абстрактного класса, которые позволят создавать Точки координат с разными 
характеристиками. Например, мы можем иметь точки координат со следующими 
характеристиками: 
	1. Одна, две или три координаты в пространстве (X,Y,Z: целые числа) 
	2. Цвет точки (строка) 
	3. Время появления точки (строка) 
Обратите внимание, что эти характеристики не составляют исчерпывающий список (так как в 
будущем могут появиться новые характеристики) и могут составлять любые комбинации, 
например:  
	1. Точка в координате 3, красного цвета 
	2. Точка в координате {4,2,5} в 11:00 
	3. Точка в координате {7,7} в 15:35, желтого цвета 
С целью совместимости с последующими задачами, сохраните Двухмерную и Трёхмерную точки 
из задачи 2.3.5 без изменений.




Задание 5. Полиморфизм: виртуальный вызов метода, interface, 
implements 
5.1. Сложение.  
Используя Полиморфизм: виртуальный вызов метода, interface, 
implements разработайте метод, который принимает набор числовых значенийи возвращает их сумму в 
вещественной форме. С использованием данного метода выполните следующие сложения: 
	1. 2+3/5+2.3
	2. 3.6+49/12+3+3/2
	3. 1/3+1



Задание 6. Полиморфное сравнение: equals
6.3.Сравнение линий.  
Измените сущность Линия из задачи 1.1.6. Переопределите метод сравнения объектов по 
состоянию(equals) таким образом, чтобы две линии считались одинаковыми в том случае, если их начало 
и конец расположены в одинаковых точках. 



Задание 7. Пакеты 
7.1. Навести порядок.  
Данная задача предполагает реорганизацию ранее написанных классов. Расположите все ранее 
написанные классы по пакетам таким образом, чтобы логически близкие классы оказались 
сгруппированы друг с другом. Имена пакетов должны иметь как минимум трехсоставную форму, 
вида: ru.sergeeva.type. Вместо type подставить название логического блока. Например, классы описывающие точку, линию, ломаную 
линию, фигуру, квадрат, треугольник, круг и прямоугольник можно расположить в пакете 
ru.sergeeva.geometry.  

7.2. Главный метод. 
Создайте пакет ru.sergeeva.main в котором расположить класс с точкой входа в исполнение программы (public static void 
main). Также следует проверить, что ни в одном другом пакете нет классов имеющих точку входа 
в исполнение программы. В этом же пакете необходимо расположить класс (или интерфейс) с 
методами из задач и продемонстрировать их работоспособность.  

7.3. Возведение в степень.  
Создайте метод принимающий две строки, в которых будут записаны числа X и Y. Возвращает 
метод результат возведения X в степень Y. Для преобразования строки в число следует 
использовать метод Integer.parseInt, а для возведения в степень метод Math.pow. Вызовите 
разработанный метод передав туда параметры командной строки полученные точкой входа в 
программу. Реализуйте метод так, что бы для возведения в степень и преобразования строки 
использовались короткие имена статических методов.



Задание 8. Пакетная инкапсуляция: package-private, protected
8.5.Клонирование линии. 
Измените сущность Линия из 2.6.3.  
Переопределите метод клонирования, унаследованный от класса Object, таким образом, чтобы 
при его вызове возвращался новый объект Линии, значения полей которого будут копиями 
оригинальной Линии.